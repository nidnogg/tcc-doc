

@misc{fuzzing_book,
  title = {The Fuzzing Book},
  author = {Zeller, Andreas and others},
  url = {https://www.fuzzingbook.org/},
  note = {(Acessado em: 02/01/2022)},
  year = {2022},
}


@misc{parsifal_docs,
  title = {Parsifal Help},
  url = {https://parsif.al/help/},
  note = {(Acessado em: 07/05/2021)},
  year = {2021},
}

@misc{sql_port_swigger,
  title = {Port Swigger - SQL Injection},
  url = {https://portswigger.net/web-security/sql-injection},
  note = {(Acessado em: 17/12/2021)},
  year = {2022},
}

@misc{mysql_union,
  title = {MySQL Union},
  url = {https://dev.mysql.com/doc/refman/8.0/en/union.html},
  note = {(Acessado em: 01/12/2021)},
  year = {2022},
}

@article{bach_owasp2020understanding,
  title={Understanding the top 10 owasp vulnerabilities},
  author={Bach-Nutman, Matthew},
  journal={arXiv preprint arXiv:2012.09960},
  year={2020}
}

@article{li2018fuzzing,
  title={Fuzzing: a survey},
  author={Li, Jun and Zhao, Bodong and Zhang, Chao},
  journal={Cybersecurity},
  volume={1},
  number={1},
  pages={1--13},
  year={2018},
  publisher={SpringerOpen}
}

@misc{fuzzing_info,
  title = {fuzzing.info - History},
  url = {https://fuzzinginfo.wordpress.com/history/},
  note = {(Acessado em: 28/02/2022)},
  year = {2022}
}

@inproceedings{wu2011some,
  title={Some analysis and research of the AdaBoost algorithm},
  author={Wu, Peng and Zhao, Hui},
  booktitle={International Conference on Intelligent Computing and Information Science},
  pages={1--5},
  year={2011},
  organization={Springer}
}


@misc{out_of_band_sql_invicti,
  title = {Invicti - What is out-of-band SQL injection?},
  url = {https://www.invicti.com/learn/out-of-band-sql-injection-oob-sqli/},
  note = {(Acessado em: 28/05/2022)},
  year = {2022}
}


@misc{session_fixation_invicti,
  title = {Acunetix Invicti - Session Fixation},
  author = {Andrzej, Tomasz},
  url = {https://www.acunetix.com/blog/web-security-zone/what-is-session-fixation/},
  note = {(Acessado em: 28/05/2022)},
  year = {2022}
}

@article{ruder2016overview,
  title={An overview of gradient descent optimization algorithms},
  author={Ruder, Sebastian},
  journal={arXiv preprint arXiv:1609.04747},
  year={2016}
}

@misc{overview_gradient_descent_stochastic,
  title = {An overview of gradient descent optimization algorithms},
  author={Ruder, Sebastian},
  url = {https://ruder.io/optimizing-gradient-descent/},
  note = {(Acessado em: 11/05/2022)},
  year = {2016}
}

@article{vapnik_svm_support,
  author={Chapelle, O. and Haffner, P. and Vapnik, V.N.},
  journal={IEEE Transactions on Neural Networks}, 
  title={Support vector machines for histogram-based image classification}, 
  year={1999},
  volume={10},
  number={5},
  pages={1055-1064},
  doi={10.1109/72.788646}
}

@article{ben2001_vapnik_support,
  title={Support vector clustering},
  author={Ben-Hur, Asa and Horn, David and Siegelmann, Hava T and Vapnik, Vladimir},
  journal={Journal of machine learning research},
  volume={2},
  number={Dec},
  pages={125--137},
  year={2001}
}

@misc{scikit_svm_module,
  title = {scikit-learn, Documentation for svm modules},
  url = {https://scikit-learn.org/stable/modules/svm.html},
  note = {(Acessado em: 02/05/2022)},
  year = {2022}
}

@misc{ray_backend_parallel,
  title = {Ray Documentation - Distributed Scikit-learn / Joblib},
  url = {https://docs.ray.io/en/latest/ray-more-libs/joblib.html},
  note = {(Acessado em: 07/03/2022)},
  year = {2022}
}

@misc{ml_based_waf,
  title = {MLBasedWAF},
  author = {Vladan Stojnic},
  url = {https://github.com/vladan-stojnic/ML-based-WAF},
  note = {(Acessado em: 13/12/2021)},
  year = {2020}
}

@misc{waf_brain,
  title = {WAF-Brain},
  author = {Sergio Fdez},
  url = {https://github.com/BBVA/waf-brain},
  note = {(Acessado em: 06/07/2021)},
  year = {2018}
}

@misc{json_org,
  title = {ECMA-404 The JSON Data Interchange Standard},
  url = {https://www.json.org/json-en.html},
  note = {(Acessado em: 01/04/2021)},
  year = {2022}
}

@misc{yaml_org,
  title = {YAML Ain't Markup Language™},
  url = {https://yaml.org/},
  note = {(Acessado em: 01/04/2021)},
  year = {2022}
}

@misc{adversarial_example,
  title = {Tensorflow Documentation - Note on Adversarial Examples},
  url = {https://www.tensorflow.org/tutorials/generative/adversarial_fgsm},
  note = {(Acessado em: 30/12/2021)},
  year = {2022}
}

@article{kar2016sqligot,
  title={SQLiGoT: Detecting SQL injection attacks using graph of tokens and SVM},
  author={Kar, Debabrata and Panigrahi, Suvasini and Sundararajan, Srikanth},
  journal={Computers \& Security},
  volume={60},
  pages={206--225},
  year={2016},
  publisher={Elsevier}
}

@misc{kaggle_dataset_sql,
  title = {Kaggle - SQL Injection Dataset},
  author = {Syed Saqlain},
  url = {https://www.kaggle.com/datasets/syedsaqlainhussain/sql-injection-dataset},
  note = {(Acessado em: 16/06/2021)},
  year = {2021}
}

@misc{wafec_doc,
  title = {Web Application Firewall Evaluation Criteria - Version 1.0},
  author = {Web Application Security Consortium},
  url = {http://projects.webappsec.org/f/wasc-wafec-v1.0.pdf},
  note = {(Acessado em: 06/06/2022)},
  year = {2006}
}

@misc{gotestwaf_wallarm,
  title = {GoTestWAF - Wallarm},
  author = {Wallarm},
  url = {https://github.com/wallarm/gotestwaf},
  note = {(Acessado em: 06/06/2022)},
  year = {2022}
}

@article{adaboostfreund1999short,
  title={A short introduction to boosting},
  author={Freund, Yoav and Schapire, Robert and Abe, Naoki},
  journal={Journal-Japanese Society For Artificial Intelligence},
  volume={14},
  number={771-780},
  pages={1612},
  year={1999},
  note ={(Acessado em: 08/06/2022)},
  publisher={JAPANESE SOC ARTIFICIAL INTELL}
}

@misc{windbg_docs,
  title = {windbg Documentation},
  author = {Microsoft},
  url = {https://docs.microsoft.com/en-us/windows-hardware/drivers/debugger/getting-started-with-windbg},
  note = {(Acessado em: 02/06/2022)},
  year = {2022}
}

@misc{gdb_docs,
  title = {gdb Documentation},
  author = {GNU},
  url = {https://sourceware.org/gdb/documentation/},
  note = {(Acessado em: 02/06/2022)},
  year = {2021}
}

@misc{ida_pro_docs,
  title = {IDA Pro Documentation},
  author = {hex-rays},
  url = {https://hex-rays.com/documentation/},
  note = {(Acessado em: 02/06/2022)},
  year = {2022}
}

@article{boosting_schapire1990strength,
  title={The strength of weak learnability},
  author={Schapire, Robert E},
  journal={Machine learning},
  volume={5},
  number={2},
  pages={197--227},
  year={1990},
  publisher={Springer}
}

@article{fredj_owasp_nodate,
	title = {An {OWASP} {Top} {Ten} {Driven} {Survey} on {Web} {Application} {Protection} {Methods}},
	abstract = {Web applications (WAs) are constantly evolving and deployed at broad scale. However, they are exposed to a variety of attacks. The biggest challenge facing organizations is how to develop a WA that fulﬁlls their requirements with respect to sensitive data exchange, Ecommerce, and secure workﬂows. This paper identiﬁes the most critical web vulnerabilities according to OWASP Top Ten, their corresponding attacks, and their countermeasures. The application of these countermeasures will guarantee the protection of the WAs against the most severe attacks and prevent several unknown exploits.},
	language = {en},
	author = {Fredj, Ouissem Ben and Cheikhrouhou, Omar and Krichen, Moez and Hamam, Habib and Derhab, Abdelouahid},
	pages = {17},
	file = {Fredj et al. - An OWASP Top Ten Driven Survey on Web Application .pdf:C\:\\Users\\henri\\Zotero\\storage\\S2DW9ALA\\Fredj et al. - An OWASP Top Ten Driven Survey on Web Application .pdf:application/pdf},
}

@article{sahu_analysis_2017,
	title = {Analysis of {Web} {Application} {Code} {Vulnerabilities} using {Secure} {Coding} {Standards}},
	volume = {42},
	issn = {2193-567X, 2191-4281},
	url = {http://link.springer.com/10.1007/s13369-016-2362-5},
	doi = {10.1007/s13369-016-2362-5},
	abstract = {The evolution of modern web application involves a broad range of web technologies such as ActiveX, JavaScript and CGI. It mitigates the demand of bolt-on security services, but remains suffered from code vulnerabilities. Two common issues of web application code vulnerability are the wrong style of writing code and improper server conﬁguration. Enhancing the web application’s functionalities and ease of use are the primary concern of developers. Security is their second concern, resulting in code vulnerabilities. The application developers may effectively deal with code vulnerabilities through adhering to Secure Coding Standards. But manually applying all the Secure Coding Standard is susceptible to human errors. Hence, a graph-based interactive system is developed in the context of Secure Coding Standards to handle code vulnerabilities. Evaluation of the developed system is cafrried out by using standard available datasets such as CVE, NVD, Syhunt Vulnerable PHP Code and OWASP.},
	language = {en},
	number = {2},
	urldate = {2022-07-20},
	journal = {Arab J Sci Eng},
	author = {Sahu, Divya Rishi and Tomar, Deepak Singh},
	month = feb,
	year = {2017},
	pages = {885--895},
	file = {Sahu and Tomar - 2017 - Analysis of Web Application Code Vulnerabilities u.pdf:C\:\\Users\\henri\\Zotero\\storage\\3QB4QQK9\\Sahu and Tomar - 2017 - Analysis of Web Application Code Vulnerabilities u.pdf:application/pdf},
}

@article{le_automated_2022,
	title = {Automated reverse engineering of role-based access control policies of web applications},
	volume = {184},
	issn = {01641212},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S0164121221002065},
	doi = {10.1016/j.jss.2021.111109},
	abstract = {Access control (AC) is an important security mechanism used in software systems to restrict access to sensitive resources. Therefore, it is essential to validate the correctness of AC implementations with respect to policy specifications or intended access rights. However, in practice, AC policy specifications are often missing or poorly documented; in some cases, AC policies are hard-coded in business logic implementations. This leads to difficulties in validating the correctness of policy implementations and detecting AC defects.},
	language = {en},
	urldate = {2022-07-20},
	journal = {Journal of Systems and Software},
	author = {Le, Ha Thanh and Shar, Lwin Khin and Bianculli, Domenico and Briand, Lionel Claude and Nguyen, Cu Duy},
	month = feb,
	year = {2022},
	pages = {111109},
	file = {Le et al. - 2022 - Automated reverse engineering of role-based access.pdf:C\:\\Users\\henri\\Zotero\\storage\\Q66YUZ9N\\Le et al. - 2022 - Automated reverse engineering of role-based access.pdf:application/pdf},
}

@inproceedings{hashim_defences_2021,
	address = {Khartoum, Sudan},
	title = {Defences {Against} web {Application} {Attacks} and {Detecting} {Phishing} {Links} {Using} {Machine} {Learning}},
	isbn = {978-1-72819-111-9},
	url = {https://ieeexplore.ieee.org/document/9429609/},
	doi = {10.1109/ICCCEEE49695.2021.9429609},
	abstract = {In recent years web applications that are hacked every day estimated to be 30 000, and in most cases, web developers or website owners do not even have enough knowledge about what is happening on their sites. Web hackers can use many attacks to gain entry or compromise legitimate web applications, they can also deceive people by using phishing sites to collect their sensitive and private information. In response to this, the need is raised to take proper measures to understand the risks and be aware of the vulnerabilities that may affect the website and hence the normal business ﬂow. In the scope of this study, mitigations against the most common web application attacks are set, and the web administrator is provided with ways to detect phishing links which is a social engineering attack, the study also demonstrates the generation of web application logs that simpliﬁes the process of analyzing the actions of abnormal users to show when behavior is out of bounds, out of scope, or against the rules. The methods of mitigation are accomplished by secure coding techniques and the methods for phishing link detection are performed by various machine learning algorithms and deep learning techniques. The developed application has been tested and evaluated against various attack scenarios, the outcomes obtained from the test process showed that the website had successfully mitigated these dangerous web application attacks, and for the detection of phishing links part, a comparison is made between different algorithms to ﬁnd the best one, and the outcome of the best model gave 98\% accuracy.},
	language = {en},
	urldate = {2022-07-20},
	booktitle = {2020 {International} {Conference} on {Computer}, {Control}, {Electrical}, and {Electronics} {Engineering} ({ICCCEEE})},
	publisher = {IEEE},
	author = {Hashim, Aya and Medani, Razan and Attia, Tahani Abdalla},
	month = feb,
	year = {2021},
	pages = {1--6},
	file = {Hashim et al. - 2021 - Defences Against web Application Attacks and Detec.pdf:C\:\\Users\\henri\\Zotero\\storage\\7FEYB34I\\Hashim et al. - 2021 - Defences Against web Application Attacks and Detec.pdf:application/pdf},
}

@article{ayeni_detecting_2018,
	title = {Detecting {Cross}-{Site} {Scripting} in {Web} {Applications} {Using} {Fuzzy} {Inference} {System}},
	volume = {2018},
	issn = {2090-7141, 2090-715X},
	url = {https://www.hindawi.com/journals/jcnc/2018/8159548/},
	doi = {10.1155/2018/8159548},
	abstract = {With improvement in computing and technological advancements, web-based applications are now ubiquitous on the Internet. However, these web applications are becoming prone to vulnerabilities which have led to theft of confidential information, data loss, and denial of data access in the course of information transmission. Cross-site scripting (XSS) is a form of web security attack which involves the injection of malicious codes into web applications from untrusted sources. Interestingly, recent research studies on the web application security centre focus on attack prevention and mechanisms for secure coding; recent methods for those attacks do not only generate high false positives but also have little considerations for the users who oftentimes are the victims of malicious attacks. Motivated by this problem, this paper describes an “intelligent” tool for detecting cross-site scripting flaws in web applications. This paper describes the method implemented based on fuzzy logic to detect classic XSS weaknesses and to provide some results on experimentations. Our detection framework recorded 15\% improvement in accuracy and 0.01\% reduction in the false-positive rate which is considerably lower than that found in the existing work by Koli et al. Our approach also serves as a decision-making tool for the users.},
	language = {en},
	urldate = {2022-07-20},
	journal = {Journal of Computer Networks and Communications},
	author = {Ayeni, Bakare K. and Sahalu, Junaidu B. and Adeyanju, Kolawole R.},
	month = aug,
	year = {2018},
	pages = {1--10},
	file = {Ayeni et al. - 2018 - Detecting Cross-Site Scripting in Web Applications.pdf:C\:\\Users\\henri\\Zotero\\storage\\WW6EWYXD\\Ayeni et al. - 2018 - Detecting Cross-Site Scripting in Web Applications.pdf:application/pdf},
}

@article{gasiba_ranking_2020,
	title = {Ranking {Secure} {Coding} {Guidelines} for {Software} {Developer} {Awareness} {Training} in the {Industry}},
	abstract = {Secure coding guidelines are essential material used to train and raise awareness of software developers on the topic of secure software development. In industrial environments, since developer time is costly, and training and education is part of non-productive hours, it is important to address and stress the most important topics ﬁrst. In this work, we devise a method, based on publicly available real-world vulnerability databases and secure coding guideline databases, to rank important secure coding guidelines based on deﬁned industry-relevant metrics. The goal is to deﬁne priorities for a teaching curriculum on raising cybersecurity awareness of software developers on secure coding guidelines. Furthermore, we do a small comparison study by asking computer science students from university on how they rank the importance of secure coding guidelines and compare the outcome to our results.},
	language = {en},
	author = {Gasiba, Tiago and Lechner, Ulrike and Cuellar, Jorge and Zouitni, Alae},
	year = {2020},
	pages = {11},
	file = {Gasiba et al. - 2020 - Ranking Secure Coding Guidelines for Software Deve.pdf:C\:\\Users\\henri\\Zotero\\storage\\8IEMBMST\\Gasiba et al. - 2020 - Ranking Secure Coding Guidelines for Software Deve.pdf:application/pdf},
}

@article{liu_graphxss_2022,
	title = {{GraphXSS}: {An} efficient {XSS} payload detection approach based on graph convolutional network},
	volume = {114},
	issn = {01674048},
	shorttitle = {{GraphXSS}},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S016740482100420X},
	doi = {10.1016/j.cose.2021.102597},
	language = {en},
	urldate = {2022-07-20},
	journal = {Computers \& Security},
	author = {Liu, Zhonglin and Fang, Yong and Huang, Cheng and Han, Jiaxuan},
	month = mar,
	year = {2022},
	pages = {102597},
	file = {Liu et al. - 2022 - GraphXSS An efficient XSS payload detection appro.pdf:C\:\\Users\\henri\\Zotero\\storage\\CJ9EQUE3\\Liu et al. - 2022 - GraphXSS An efficient XSS payload detection appro.pdf:application/pdf},
}

@article{gorski_i_2021,
	title = {"{I} just looked for the solution!" - {On} {Integrating} {Security}-{Relevant} {Information} in {Non}-{Security} {API} {Documentation} to {Support} {Secure} {Coding} {Practices}},
	issn = {0098-5589, 1939-3520, 2326-3881},
	url = {https://ieeexplore.ieee.org/document/9470906/},
	doi = {10.1109/TSE.2021.3094171},
	abstract = {Software developers build complex systems using plenty of third-party libraries. Documentation is key to understand and use the functionality provided via the libraries’ APIs. Therefore, functionality is the main focus of contemporary API documentation, while cross-cutting concerns such as security are almost never considered at all, especially when the API itself does not provide security features. Documentations of JavaScript libraries for use in web applications, e.g., do not specify how to add or adapt a Content Security Policy (CSP) to mitigate content injection attacks like Cross-Site Scripting (XSS). This is unfortunate, as security-relevant API documentation might have an inﬂuence on secure coding practices and prevailing major vulnerabilities such as XSS. For the ﬁrst time, we study the effects of integrating security-relevant information in non-security API documentation. For this purpose, we took CSP as an exemplary study object and extended the ofﬁcial Google Maps JavaScript API documentation with security-relevant CSP information in three distinct manners. Then, we evaluated the usage of these variations in a between-group eye-tracking lab study involving N=49 participants. Our observations suggest: (1) Developers are focused on elements with code examples. They mostly skim the documentation while searching for a quick solution to their programming task. This ﬁnding gives further evidence to results of related studies. (2) The location where CSP-related code examples are placed in non-security API documentation signiﬁcantly impacts the time it takes to ﬁnd this security-relevant information. In particular, the study results showed that the proximity to functional-related code examples in documentation is a decisive factor. (3) Examples signiﬁcantly help to produce secure CSP solutions. (4) Developers have additional information needs that our approach cannot meet.},
	language = {en},
	urldate = {2022-07-20},
	journal = {IIEEE Trans. Software Eng.},
	author = {Gorski, Peter Leo and Moller, Sebastian and Wiefling, Stephan and Lo Iacono, Luigi},
	year = {2021},
	pages = {1--1},
	file = {Gorski et al. - 2021 - I just looked for the solution! - On Integrating.pdf:C\:\\Users\\henri\\Zotero\\storage\\FVFQ9VTL\\Gorski et al. - 2021 - I just looked for the solution! - On Integrating.pdf:application/pdf},
}

@inproceedings{wang_if_2021,
	address = {Madrid, ES},
	title = {If {It}’s {Not} {Secure}, {It} {Should} {Not} {Compile}: {Preventing} {DOM}-{Based} {XSS} in {Large}-{Scale} {Web} {Development} with {API} {Hardening}},
	isbn = {978-1-66540-296-5},
	shorttitle = {If {It}’s {Not} {Secure}, {It} {Should} {Not} {Compile}},
	url = {https://ieeexplore.ieee.org/document/9401952/},
	doi = {10.1109/ICSE43902.2021.00123},
	abstract = {With tons of efforts spent on its mitigation, Crosssite scripting (XSS) remains one of the most prevalent security threats on the internet. Decades of exploitation and remediation demonstrated that code inspection and testing alone does not eliminate XSS vulnerabilities in complex web applications with a high degree of confidence.},
	language = {en},
	urldate = {2022-07-20},
	booktitle = {2021 {IEEE}/{ACM} 43rd {International} {Conference} on {Software} {Engineering} ({ICSE})},
	publisher = {IEEE},
	author = {Wang, Pei and Bangert, Julian and Kern, Christoph},
	month = may,
	year = {2021},
	pages = {1360--1372},
	file = {Wang et al. - 2021 - If It’s Not Secure, It Should Not Compile Prevent.pdf:C\:\\Users\\henri\\Zotero\\storage\\2FZ2BZNP\\Wang et al. - 2021 - If It’s Not Secure, It Should Not Compile Prevent.pdf:application/pdf},
}

@inproceedings{aziz_inculcating_2016,
	address = {Mataram, Indonesia},
	title = {Inculcating {Secure} {Coding} for beginners},
	isbn = {978-1-5090-1648-8},
	url = {http://ieeexplore.ieee.org/document/7905709/},
	doi = {10.1109/IAC.2016.7905709},
	abstract = {This paper describes an implementation of a S ecure Coding learning package for Undergraduate students in the Kulliyyah of Information and Communication Technology (KICT) at the International Islamic University Malaysia. The learning package consists of three components which are S CALT, WebGoat and notes on several vulnerabilities in programming languages. This work aims to create awareness among the KICT community on the importance of secure coding in any application development. This package teaches individuals on how hackers take advantage on vulnerabilities that exist on web applications and allows students to experience within the WebGoat environment. Tips on handling vulnerabilities when coding in C, C++ and Java are also provided for students’ reference. This learning package is an effort to inculcate students at an early age of software developers, to produce secure applications.},
	language = {en},
	urldate = {2022-07-20},
	booktitle = {2016 {International} {Conference} on {Informatics} and {Computing} ({ICIC})},
	publisher = {IEEE},
	author = {Aziz, Normaziah A. and Shamsuddin, Siti Nurul Zulaiha and Hassan, Nur Asnida},
	year = {2016},
	pages = {164--168},
	file = {Aziz et al. - 2016 - Inculcating Secure Coding for beginners.pdf:C\:\\Users\\henri\\Zotero\\storage\\DYP7J4Y6\\Aziz et al. - 2016 - Inculcating Secure Coding for beginners.pdf:application/pdf},
}

@inproceedings{kamtuo_machine_2016,
	address = {Chiang Mai, Thailand},
	title = {Machine {Learning} for {SQL} injection prevention on server-side scripting},
	isbn = {978-1-5090-4420-7},
	url = {http://ieeexplore.ieee.org/document/7859950/},
	doi = {10.1109/ICSEC.2016.7859950},
	abstract = {SQL injection is the most common web application vulnerability. The vulnerability can be generated unintentionally by software developer during the development phase. To ensure that all secure coding practices are adopted to prevent the vulnerability. The framework of SQL injection prevention using compiler platform and machine learning is proposed. The machine learning part will be described primarily since it is the core of this framework to support SQL injection prediction by conducting 1,100 datasets of vulnerabilities to train machine learning model. The results indicated that decision tree is the best model in term of processing time, highest efficiency in prediction.},
	language = {en},
	urldate = {2022-07-20},
	booktitle = {2016 {International} {Computer} {Science} and {Engineering} {Conference} ({ICSEC})},
	publisher = {IEEE},
	author = {Kamtuo, Krit and Soomlek, Chitsutha},
	month = dec,
	year = {2016},
	pages = {1--6},
	file = {Kamtuo and Soomlek - 2016 - Machine Learning for SQL injection prevention on s.pdf:C\:\\Users\\henri\\Zotero\\storage\\BIJRPQ66\\Kamtuo and Soomlek - 2016 - Machine Learning for SQL injection prevention on s.pdf:application/pdf},
}

@article{surian_nscanner_2020,
	title = {Nscanner: {Vulnerabilities} {Detection} {Tool} for {Web} {Application}},
	volume = {1712},
	issn = {1742-6588, 1742-6596},
	shorttitle = {Nscanner},
	url = {https://iopscience.iop.org/article/10.1088/1742-6596/1712/1/012018},
	doi = {10.1088/1742-6596/1712/1/012018},
	abstract = {Internet has been dominating the world nearly a decade. Web application is known to be the most widespread platform of the internet especially when it comes to share resources, e-commerce services, education and business platforms. Since the usage of web applications are increasing dramatically, it’s becoming more vulnerable for security attacks. Each year, organizations facing many security attacks towards their web applications. Although many security practices and mitigations have been applying in web application, however there are still some security loophole issues can be found in web application. For instance, these loopholes can be referred as lack of secure coding (standards) implemented in web application, lack of formal security training approach for web developers and improper security testing for their web application. Besides, social engineering attacks also tremendously increasing each year. Many organizations were compromised through phishing attacks due to lack of awareness among users (employees). As a solution to overcome the issues, a research project will be carried out to implement a system called Nscanner to detect Structured Query Language injection (SQLi) and Cross-Site Scripting (XSS) vulnerabilities for web application. Moreover, the developer also will design a malware detection feature based on machine learning approach to detect malware found in attachments from emails in order to prevent malware phishing attacks.},
	language = {en},
	number = {1},
	urldate = {2022-07-20},
	journal = {J. Phys.: Conf. Ser.},
	author = {Surian, R. Utaya and Rahman, Nor Azlina Abd and Nathan, Yogeswaran},
	month = dec,
	year = {2020},
	pages = {012018},
	file = {Surian et al. - 2020 - Nscanner Vulnerabilities Detection Tool for Web A.pdf:C\:\\Users\\henri\\Zotero\\storage\\AAR5QAIB\\Surian et al. - 2020 - Nscanner Vulnerabilities Detection Tool for Web A.pdf:application/pdf},
}

@article{pereira_padres_2022,
	title = {{PADRES}: {Tool} for {PrivAcy}, {Data} {REgulation} and {Security}},
	volume = {17},
	issn = {23527110},
	shorttitle = {{PADRES}},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S2352711021001515},
	doi = {10.1016/j.softx.2021.100895},
	abstract = {Since May 2018, companies have been required to comply with the General Data Protection Regulation (GDPR). The compliance process can be very expensive, for example, specialized human resources are needed who need to study the regulations and then implement any changes in company procedures, IT applications and infrastructures. With this in mind, PADRES a tool for PrivAcy, Data REgulation and Security was developed to analyse web applications and help in the compliance process. This open source software contains the main points of GDPR organized by principles in the form of a checklist and questionnaire. These questions are answered manually. Optionally a security analysis can also be performed, this is performed by integrating open source scanning tools such as NMAP, ZAP and cookie analyzers. The output of these tools is saved and a final merged report is generated with the information obtained and also a set of suggestions and recommendations.},
	language = {en},
	urldate = {2022-07-20},
	journal = {SoftwareX},
	author = {Pereira, Fábio and Crocker, Paul and Leithardt, Valderi R.Q.},
	month = jan,
	year = {2022},
	pages = {100895},
	file = {Pereira et al. - 2022 - PADRES Tool for PrivAcy, Data REgulation and Secu.pdf:C\:\\Users\\henri\\Zotero\\storage\\WLSG2GSA\\Pereira et al. - 2022 - PADRES Tool for PrivAcy, Data REgulation and Secu.pdf:application/pdf},
}

@inproceedings{hasan_perusal_2017,
	address = {Jaipur},
	title = {Perusal of web application security approach},
	isbn = {978-1-5386-3030-3},
	url = {http://ieeexplore.ieee.org/document/8324026/},
	doi = {10.1109/INTELCCT.2017.8324026},
	abstract = {Internet users and its usage have grown almost exponentially during last decade. Most of the web applications contain both private(sensitive) and public information in theircorresponding database that brings the security of private information on the forefront of the challenge of this domain. Cyber criminals can attempt to stealor tamperwith private information from these insecure or vulnerable web applications by exploiting. In this paper, we have analyzed different approaches of web application security used in current practices since their development such as secure coding, Web Application firewall, vulnerability assessment and penetration testing. In addition, we have also discussed various approachesand repositories which support vulnerability assessment and penetration testing processes.},
	language = {en},
	urldate = {2022-07-20},
	booktitle = {2017 {International} {Conference} on {Intelligent} {Communication} and {Computational} {Techniques} ({ICCT})},
	publisher = {IEEE},
	author = {Hasan, Ashikali M. and Meva, Divyakant T. and Roy, Anil K. and Doshi, Jignesh},
	month = dec,
	year = {2017},
	pages = {90--95},
	file = {Hasan et al. - 2017 - Perusal of web application security approach.pdf:C\:\\Users\\henri\\Zotero\\storage\\NL9WUIGS\\Hasan et al. - 2017 - Perusal of web application security approach.pdf:application/pdf},
}

@inproceedings{anis_securing_2018,
	address = {Athens},
	title = {Securing {Web} {Applications} with {Secure} {Coding} {Practices} and {Integrity} {Verification}},
	isbn = {978-1-5386-7518-2},
	url = {https://ieeexplore.ieee.org/document/8511955/},
	doi = {10.1109/DASC/PiCom/DataCom/CyberSciTec.2018.00112},
	abstract = {The concept of security in web applications is not new. However, it is often ignored in the development stages of the applications. Being multitiered and spread across different domains, it is challenging to come up with a security solution that works for all web applications. Moreover, developers are more inclined to implement features and often do not practice secure coding. Therefore, countless web applications are launched with security vulnerabilities like cross-site scripting, injection attacks and resource alterations. In addition, code tampering on the client side is a serious security risk for web applications. In our opinion, integrating security features should be a part of the development process. Without practicing secure coding and having an integrity veriﬁcation system in place, it is difﬁcult to defend security attacks. In this paper, we present a system that helps developers to implement security measures on the client side code based on the best practices of secure coding. We also develop an integrity veriﬁcation module to prevent code tampering attacks on the client side. The proposed approach can be integrated with both new and existing web applications. We implement our approach for a number of JavaScript-based applications and the results show that our approach increased the security of the applications and prevented any modiﬁcations performed on the client side.},
	language = {en},
	urldate = {2022-07-20},
	booktitle = {2018 {IEEE} 16th {Intl} {Conf} on {Dependable}, {Autonomic} and {Secure} {Computing}, 16th {Intl} {Conf} on {Pervasive} {Intelligence} and {Computing}, 4th {Intl} {Conf} on {Big} {Data} {Intelligence} and {Computing} and {Cyber} {Science} and {Technology} {Congress}({DASC}/{PiCom}/{DataCom}/{CyberSciTech})},
	publisher = {IEEE},
	author = {Anis, Arafa and Zulkernine, Mohammad and Iqbal, Shahrear and Liem, Clifford and Chambers, Catherine},
	month = aug,
	year = {2018},
	pages = {618--625},
	file = {Anis et al. - 2018 - Securing Web Applications with Secure Coding Pract.pdf:C\:\\Users\\henri\\Zotero\\storage\\GAK3A8IT\\Anis et al. - 2018 - Securing Web Applications with Secure Coding Pract.pdf:application/pdf},
}

@article{valenza_waf--mole_2020,
	title = {{WAF}-{A}-{MoLE}: {An} adversarial tool for assessing {ML}-based {WAFs}},
	volume = {11},
	issn = {23527110},
	shorttitle = {{WAF}-{A}-{MoLE}},
	url = {https://linkinghub.elsevier.com/retrieve/pii/S2352711019302997},
	doi = {10.1016/j.softx.2019.100367},
	abstract = {Web Application Firewalls (WAFs) are plug-and-play security gateways that promise to enhance the security of a (potentially vulnerable) system with minimal cost and configuration. In recent years, machine learning-based WAFs are catching up with traditional, signature-based ones. They are competitive because they do not require predefined rules; instead, they infer their rules through a learning process. In this paper, we present WAF-A-MoLE, a WAF breaching tool. It uses guided mutational-based fuzzing to generate adversarial examples. The main applications include WAF (i) penetration testing, (ii) benchmarking and (iii) hardening.},
	language = {en},
	urldate = {2022-07-20},
	journal = {SoftwareX},
	author = {Valenza, Andrea and Demetrio, Luca and Costa, Gabriele and Lagorio, Giovanni},
	month = jan,
	year = {2020},
	pages = {100367},
	file = {Valenza et al. - 2020 - WAF-A-MoLE An adversarial tool for assessing ML-b.pdf:C\:\\Users\\henri\\Zotero\\storage\\TCRVGTBC\\Valenza et al. - 2020 - WAF-A-MoLE An adversarial tool for assessing ML-b.pdf:application/pdf},
}

@inproceedings{nirmal_web_2018,
	address = {Coimbatore},
	title = {Web {Application} {Vulnerabilities} - {The} {Hacker}'s {Treasure}},
	isbn = {978-1-5386-2456-2},
	url = {https://ieeexplore.ieee.org/document/8597221/},
	doi = {10.1109/ICIRCA.2018.8597221},
	abstract = {In today’s online era, a web application is an integral part of every business. A web application may be a single page HTML website or a large web portal that offers various services on a web browser. There are many tools and methodologies that are relied upon to develop a web application. The development methodologies incorporate specialized frameworks, libraries in order to have the application more standardized and have it developed at a rapid pace to meet market demands. Web applications (web app) are hardened to mitigate security issues which are commonly referred as web application vulnerabilities. A web app security vulnerability is any kind of loop hole that allows an attacker to break into the web application to perform undesired actions on the target website. This may range from a cross site scripting (XSS) to vulnerabilities like Server Side Request Forger (SSRF) and its implications like XML External Entity (XXE). Though web applications are hardened to mitigate vulnerabilities, large scale web applications are still vulnerable post release in most cases. As a part of security research, critical vulnerabilities on large scale web applications were identified and the same were reported to the concerned security research team. The reporting was acknowledged and mitigated through appropriate channels. Common Vulnerabilities and Exposures (CVEs) were filed on Microsoft and CISCO products and the same were logged in National Vulnerability Database (NVD). Insights and tenets regarding web application and its vulnerabilities are highlighted in this manuscript.},
	language = {en},
	urldate = {2022-07-20},
	booktitle = {2018 {International} {Conference} on {Inventive} {Research} in {Computing} {Applications} ({ICIRCA})},
	publisher = {IEEE},
	author = {Nirmal, K and Janet, B. and Kumar, R.},
	month = jul,
	year = {2018},
	pages = {58--62},
	file = {Nirmal et al. - 2018 - Web Application Vulnerabilities - The Hacker's Tre.pdf:C\:\\Users\\henri\\Zotero\\storage\\WCR9CW39\\Nirmal et al. - 2018 - Web Application Vulnerabilities - The Hacker's Tre.pdf:application/pdf},
}

@book{stuttard_web_nodate,
	title = {The {Web} {Application} {Hacker}'s {Handbook}},
	language = {en},
	author = {Stuttard, Dafydd and Pinto, Marcus},
	year = {2007},
	file = {Stuttard and Pinto - The Web Application Hacker's Handbook.pdf:C\:\\Users\\henri\\Zotero\\storage\\EUVDBKGH\\Stuttard and Pinto - The Web Application Hacker's Handbook.pdf:application/pdf},
}

@article{dantas_transformers_2021,
	title = {Transformers: {Teoria} e {Viabilização}},
	language = {pt},
	journal = {FGV EMAp - Trabalhos de Conclusão de Curso},
	author = {Dantas, Leonardo},
	year = {2021},
	pages = {70},
}